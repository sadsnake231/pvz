// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.1
// source: order/order.proto

package order

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OrderHandler_AcceptOrder_FullMethodName         = "/transport.grpc.OrderHandler/AcceptOrder"
	OrderHandler_ReturnOrder_FullMethodName         = "/transport.grpc.OrderHandler/ReturnOrder"
	OrderHandler_IssueRefundOrders_FullMethodName   = "/transport.grpc.OrderHandler/IssueRefundOrders"
	OrderHandler_GetUserOrders_FullMethodName       = "/transport.grpc.OrderHandler/GetUserOrders"
	OrderHandler_GetRefundedOrders_FullMethodName   = "/transport.grpc.OrderHandler/GetRefundedOrders"
	OrderHandler_GetOrderHistory_FullMethodName     = "/transport.grpc.OrderHandler/GetOrderHistory"
	OrderHandler_GetUserActiveOrders_FullMethodName = "/transport.grpc.OrderHandler/GetUserActiveOrders"
	OrderHandler_GetAllActiveOrders_FullMethodName  = "/transport.grpc.OrderHandler/GetAllActiveOrders"
	OrderHandler_GetOrderHistoryV2_FullMethodName   = "/transport.grpc.OrderHandler/GetOrderHistoryV2"
)

// OrderHandlerClient is the client API for OrderHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderHandlerClient interface {
	// Orders
	AcceptOrder(ctx context.Context, in *AcceptOrderRequest, opts ...grpc.CallOption) (*AcceptOrderResponse, error)
	ReturnOrder(ctx context.Context, in *ReturnOrderRequest, opts ...grpc.CallOption) (*ReturnOrderResponse, error)
	// Actions
	IssueRefundOrders(ctx context.Context, in *IssueRefundRequest, opts ...grpc.CallOption) (*IssueRefundResponse, error)
	// Reports
	GetUserOrders(ctx context.Context, in *GetUserOrdersRequest, opts ...grpc.CallOption) (*GetUserOrdersResponse, error)
	GetRefundedOrders(ctx context.Context, in *GetRefundedOrdersRequest, opts ...grpc.CallOption) (*GetRefundedOrdersResponse, error)
	GetOrderHistory(ctx context.Context, in *GetOrderHistoryRequest, opts ...grpc.CallOption) (*GetOrderHistoryResponse, error)
	GetUserActiveOrders(ctx context.Context, in *GetUserActiveOrdersRequest, opts ...grpc.CallOption) (*GetUserActiveOrdersResponse, error)
	GetAllActiveOrders(ctx context.Context, in *GetAllActiveOrdersRequest, opts ...grpc.CallOption) (*GetAllActiveOrdersResponse, error)
	GetOrderHistoryV2(ctx context.Context, in *GetOrderHistoryV2Request, opts ...grpc.CallOption) (*GetOrderHistoryV2Response, error)
}

type orderHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderHandlerClient(cc grpc.ClientConnInterface) OrderHandlerClient {
	return &orderHandlerClient{cc}
}

func (c *orderHandlerClient) AcceptOrder(ctx context.Context, in *AcceptOrderRequest, opts ...grpc.CallOption) (*AcceptOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AcceptOrderResponse)
	err := c.cc.Invoke(ctx, OrderHandler_AcceptOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderHandlerClient) ReturnOrder(ctx context.Context, in *ReturnOrderRequest, opts ...grpc.CallOption) (*ReturnOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReturnOrderResponse)
	err := c.cc.Invoke(ctx, OrderHandler_ReturnOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderHandlerClient) IssueRefundOrders(ctx context.Context, in *IssueRefundRequest, opts ...grpc.CallOption) (*IssueRefundResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IssueRefundResponse)
	err := c.cc.Invoke(ctx, OrderHandler_IssueRefundOrders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderHandlerClient) GetUserOrders(ctx context.Context, in *GetUserOrdersRequest, opts ...grpc.CallOption) (*GetUserOrdersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserOrdersResponse)
	err := c.cc.Invoke(ctx, OrderHandler_GetUserOrders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderHandlerClient) GetRefundedOrders(ctx context.Context, in *GetRefundedOrdersRequest, opts ...grpc.CallOption) (*GetRefundedOrdersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRefundedOrdersResponse)
	err := c.cc.Invoke(ctx, OrderHandler_GetRefundedOrders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderHandlerClient) GetOrderHistory(ctx context.Context, in *GetOrderHistoryRequest, opts ...grpc.CallOption) (*GetOrderHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrderHistoryResponse)
	err := c.cc.Invoke(ctx, OrderHandler_GetOrderHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderHandlerClient) GetUserActiveOrders(ctx context.Context, in *GetUserActiveOrdersRequest, opts ...grpc.CallOption) (*GetUserActiveOrdersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserActiveOrdersResponse)
	err := c.cc.Invoke(ctx, OrderHandler_GetUserActiveOrders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderHandlerClient) GetAllActiveOrders(ctx context.Context, in *GetAllActiveOrdersRequest, opts ...grpc.CallOption) (*GetAllActiveOrdersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllActiveOrdersResponse)
	err := c.cc.Invoke(ctx, OrderHandler_GetAllActiveOrders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderHandlerClient) GetOrderHistoryV2(ctx context.Context, in *GetOrderHistoryV2Request, opts ...grpc.CallOption) (*GetOrderHistoryV2Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrderHistoryV2Response)
	err := c.cc.Invoke(ctx, OrderHandler_GetOrderHistoryV2_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderHandlerServer is the server API for OrderHandler service.
// All implementations must embed UnimplementedOrderHandlerServer
// for forward compatibility.
type OrderHandlerServer interface {
	// Orders
	AcceptOrder(context.Context, *AcceptOrderRequest) (*AcceptOrderResponse, error)
	ReturnOrder(context.Context, *ReturnOrderRequest) (*ReturnOrderResponse, error)
	// Actions
	IssueRefundOrders(context.Context, *IssueRefundRequest) (*IssueRefundResponse, error)
	// Reports
	GetUserOrders(context.Context, *GetUserOrdersRequest) (*GetUserOrdersResponse, error)
	GetRefundedOrders(context.Context, *GetRefundedOrdersRequest) (*GetRefundedOrdersResponse, error)
	GetOrderHistory(context.Context, *GetOrderHistoryRequest) (*GetOrderHistoryResponse, error)
	GetUserActiveOrders(context.Context, *GetUserActiveOrdersRequest) (*GetUserActiveOrdersResponse, error)
	GetAllActiveOrders(context.Context, *GetAllActiveOrdersRequest) (*GetAllActiveOrdersResponse, error)
	GetOrderHistoryV2(context.Context, *GetOrderHistoryV2Request) (*GetOrderHistoryV2Response, error)
	mustEmbedUnimplementedOrderHandlerServer()
}

// UnimplementedOrderHandlerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOrderHandlerServer struct{}

func (UnimplementedOrderHandlerServer) AcceptOrder(context.Context, *AcceptOrderRequest) (*AcceptOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptOrder not implemented")
}
func (UnimplementedOrderHandlerServer) ReturnOrder(context.Context, *ReturnOrderRequest) (*ReturnOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnOrder not implemented")
}
func (UnimplementedOrderHandlerServer) IssueRefundOrders(context.Context, *IssueRefundRequest) (*IssueRefundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssueRefundOrders not implemented")
}
func (UnimplementedOrderHandlerServer) GetUserOrders(context.Context, *GetUserOrdersRequest) (*GetUserOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserOrders not implemented")
}
func (UnimplementedOrderHandlerServer) GetRefundedOrders(context.Context, *GetRefundedOrdersRequest) (*GetRefundedOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRefundedOrders not implemented")
}
func (UnimplementedOrderHandlerServer) GetOrderHistory(context.Context, *GetOrderHistoryRequest) (*GetOrderHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderHistory not implemented")
}
func (UnimplementedOrderHandlerServer) GetUserActiveOrders(context.Context, *GetUserActiveOrdersRequest) (*GetUserActiveOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserActiveOrders not implemented")
}
func (UnimplementedOrderHandlerServer) GetAllActiveOrders(context.Context, *GetAllActiveOrdersRequest) (*GetAllActiveOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllActiveOrders not implemented")
}
func (UnimplementedOrderHandlerServer) GetOrderHistoryV2(context.Context, *GetOrderHistoryV2Request) (*GetOrderHistoryV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderHistoryV2 not implemented")
}
func (UnimplementedOrderHandlerServer) mustEmbedUnimplementedOrderHandlerServer() {}
func (UnimplementedOrderHandlerServer) testEmbeddedByValue()                      {}

// UnsafeOrderHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderHandlerServer will
// result in compilation errors.
type UnsafeOrderHandlerServer interface {
	mustEmbedUnimplementedOrderHandlerServer()
}

func RegisterOrderHandlerServer(s grpc.ServiceRegistrar, srv OrderHandlerServer) {
	// If the following call pancis, it indicates UnimplementedOrderHandlerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OrderHandler_ServiceDesc, srv)
}

func _OrderHandler_AcceptOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderHandlerServer).AcceptOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderHandler_AcceptOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderHandlerServer).AcceptOrder(ctx, req.(*AcceptOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderHandler_ReturnOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReturnOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderHandlerServer).ReturnOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderHandler_ReturnOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderHandlerServer).ReturnOrder(ctx, req.(*ReturnOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderHandler_IssueRefundOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueRefundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderHandlerServer).IssueRefundOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderHandler_IssueRefundOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderHandlerServer).IssueRefundOrders(ctx, req.(*IssueRefundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderHandler_GetUserOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderHandlerServer).GetUserOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderHandler_GetUserOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderHandlerServer).GetUserOrders(ctx, req.(*GetUserOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderHandler_GetRefundedOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRefundedOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderHandlerServer).GetRefundedOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderHandler_GetRefundedOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderHandlerServer).GetRefundedOrders(ctx, req.(*GetRefundedOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderHandler_GetOrderHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderHandlerServer).GetOrderHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderHandler_GetOrderHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderHandlerServer).GetOrderHistory(ctx, req.(*GetOrderHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderHandler_GetUserActiveOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserActiveOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderHandlerServer).GetUserActiveOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderHandler_GetUserActiveOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderHandlerServer).GetUserActiveOrders(ctx, req.(*GetUserActiveOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderHandler_GetAllActiveOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllActiveOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderHandlerServer).GetAllActiveOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderHandler_GetAllActiveOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderHandlerServer).GetAllActiveOrders(ctx, req.(*GetAllActiveOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderHandler_GetOrderHistoryV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderHistoryV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderHandlerServer).GetOrderHistoryV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderHandler_GetOrderHistoryV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderHandlerServer).GetOrderHistoryV2(ctx, req.(*GetOrderHistoryV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderHandler_ServiceDesc is the grpc.ServiceDesc for OrderHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "transport.grpc.OrderHandler",
	HandlerType: (*OrderHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AcceptOrder",
			Handler:    _OrderHandler_AcceptOrder_Handler,
		},
		{
			MethodName: "ReturnOrder",
			Handler:    _OrderHandler_ReturnOrder_Handler,
		},
		{
			MethodName: "IssueRefundOrders",
			Handler:    _OrderHandler_IssueRefundOrders_Handler,
		},
		{
			MethodName: "GetUserOrders",
			Handler:    _OrderHandler_GetUserOrders_Handler,
		},
		{
			MethodName: "GetRefundedOrders",
			Handler:    _OrderHandler_GetRefundedOrders_Handler,
		},
		{
			MethodName: "GetOrderHistory",
			Handler:    _OrderHandler_GetOrderHistory_Handler,
		},
		{
			MethodName: "GetUserActiveOrders",
			Handler:    _OrderHandler_GetUserActiveOrders_Handler,
		},
		{
			MethodName: "GetAllActiveOrders",
			Handler:    _OrderHandler_GetAllActiveOrders_Handler,
		},
		{
			MethodName: "GetOrderHistoryV2",
			Handler:    _OrderHandler_GetOrderHistoryV2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order/order.proto",
}
